local COMMON = require "libs.common"
local ACTIONS = require "libs.actions.actions"
local WORLD = require "world.world"
local GUI = require "libs_project.gui.gui"
local AutosizeLabel = require "libs_project.gui.autosize_label"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"

---@class SettingsSceneGuiScript:GuiScriptBase
local Script = COMMON.class("SettingsSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.SETTINGS_GUI })
end

function Script:bind_vh()
	self.vh = {
		root = gui.get_node("root"),
		root_adjust = gui.get_node("root/adjust"),
		fader = gui.get_node("fader"),
		click_zone = gui.get_node("click_zone"),
		right_bottom = gui.get_node("right-bottom"),
	}
	self.views = {
		btn_close = GUI.ButtonScale("btn_close"),
		btn_privacy = GUI.ButtonScale("btn_privacy"),
		checkbox_draw_shadows = GUI.Tumbler("checkbox_draw_shadows"),
		checkbox_sound = GUI.Tumbler("checkbox_sound"),
		checkbox_music = GUI.Tumbler("checkbox_music"),
		flags = {
			en = GUI.ButtonScale("flag_en"),
			fr = GUI.ButtonScale("flag_fr"),
			it = GUI.ButtonScale("flag_it"),
			de = GUI.ButtonScale("flag_de"),
			es = GUI.ButtonScale("flag_es"),
			ru = GUI.ButtonScale("flag_ru"),
			zh = GUI.ButtonScale("flag_zh"),
			ja = GUI.ButtonScale("flag_ja"),
			ko = GUI.ButtonScale("flag_ko"),
		},
		title_lbl = AutosizeLabel("title"),
		shadows_lbl = AutosizeLabel("checkbox_draw_shadows/label"),
		music_lbl = AutosizeLabel("checkbox_music/label"),
		sound_lbl = AutosizeLabel("checkbox_sound/label"),
	}
	for k, flag in pairs(self.views.flags) do
		flag.language = k
		flag.vh.selected = gui.get_node(flag.template_name .. "/selected")
		flag:set_input_listener(function()
			WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
			WORLD.storage.options:language_set(flag.language)
		end)
	end
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.SETTINGS)
	self.animation_action = ACTIONS.Sequence()
	self.animation_action.drop_empty = false

	self.fader_color = gui.get_color(self.vh.fader)
	gui.set_color(self.vh.fader, vmath.vector4(self.fader_color.x, self.fader_color.y, self.fader_color.z, 0))

	self.views.btn_close:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
		self:close()
	end)

	local chb_draw_shadows = self.views.checkbox_draw_shadows
	chb_draw_shadows:set_checked(WORLD.storage.options:draw_shadows_get())
	chb_draw_shadows:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.slider)
		WORLD.storage.options:draw_shadows_set(chb_draw_shadows.checked)
		WORLD.game.lights:set_enable_shadows(chb_draw_shadows.checked)
	end)

	self.views.checkbox_music:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.slider)
		WORLD.storage.options:music_set(not WORLD.storage.options:music_get())
	end)
	self.views.checkbox_sound:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.slider)
		WORLD.storage.options:sound_set(not WORLD.storage.options:sound_get())
	end)

	self.views.btn_privacy:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
		WORLD.sm:replace(WORLD.sm.MODALS.PRIVACY)
	end)


end

function Script:close()
	if not WORLD.sm:is_working() then
		WORLD.sdk:ads_commercial(function()
			WORLD.sm:back()
		end)
	end
end

function Script:animate_hide()
	GUI.window_hide_animation(self)
end

function Script:animate_show()
	GUI.window_show_animation(self)
end

function Script:update(dt)
	self.animation_action:update(dt)
end

function Script:on_input(action_id, action)
	if (action_id == COMMON.HASHES.INPUT.ESCAPE and action.pressed) then
		self:close()
		return true
	end
	if (self.views.btn_close:on_input(action_id, action)) then return true end
	if (self.views.checkbox_draw_shadows:on_input(action_id, action)) then return true end
	if (self.views.checkbox_music:on_input(action_id, action)) then return true end
	if (self.views.checkbox_sound:on_input(action_id, action)) then return true end
	if (self.views.btn_privacy:on_input(action_id, action)) then return true end
	for _, flag in pairs(self.views.flags) do
		if (flag:on_input(action_id, action)) then return true end
	end
	if (action_id == COMMON.HASHES.INPUT.TOUCH and action.pressed and not gui.pick_node(self.vh.click_zone, action.x, action.y)) then
		self:close()
		return
	end
end

function Script:on_resize()
	gui.set_adjust_mode(self.vh.root_adjust, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.root_adjust, COMMON.RENDER.gui_scale.scale3)
	gui.set_adjust_mode(self.vh.right_bottom, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.right_bottom, COMMON.RENDER.gui_scale.scale3)
end

function Script:on_storage_changed()
	self.views.checkbox_music:set_checked(WORLD.storage.options:music_get())
	self.views.checkbox_sound:set_checked(WORLD.storage.options:sound_get())
end

function Script:on_language_changed()
	local locale = COMMON.LOCALIZATION:locale_get()
	gui.set_enabled(self.views.flags.en.vh.selected, true) --fallback to en
	for k, flag in pairs(self.views.flags) do
		gui.set_enabled(flag.vh.selected, locale == flag.language)
	end

	self.views.title_lbl:set_text(COMMON.LOCALIZATION:translate("settings_title"))
	self.views.music_lbl:set_text(COMMON.LOCALIZATION:translate("settings_music"))
	self.views.sound_lbl:set_text(COMMON.LOCALIZATION:translate("settings_sound"))
	self.views.shadows_lbl:set_text(COMMON.LOCALIZATION:translate("settings_shadow"))
end

COMMON.N28S.register_scripts({ Script() })
local COMMON = require "libs.common"
local GUI = require "libs_project.gui.gui"
local WORLD = require "world.world"
local DEFS = require "world.balance.def.defs"
local ENUMS = require "world.enums.enums"
local VirtualPad = require "libs_project.gui.virtual_pad"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"
local ProgressBar = require "libs_project.gui.progress_bar"
local OfferView = require "libs_project.gui.offer_view"
local AutosizeLbl = require "libs_project.gui.autosize_label"

local LineMover = require "libs_project.line_mover"
local Curve = require "libs.curve"

local TEMP_V = vmath.vector3(0)

local POINTER_POSITIONS = {
	vmath.vector3(-120, 0, 0),
	vmath.vector3(-95, 50, 0),
	vmath.vector3(-65, 60, 0),
	vmath.vector3(-35, 50, 0),
	vmath.vector3(0, 0, 0),

	vmath.vector3(35, -50, 0),
	vmath.vector3(65, -60, 0),
	vmath.vector3(95, -50, 0),
	vmath.vector3(120, 0, 0),

	vmath.vector3(95, 50, 0),
	vmath.vector3(65, 60, 0),
	vmath.vector3(35, 50, 0),
	vmath.vector3(0, 0, 0),

	vmath.vector3(-35, -50, 0),
	vmath.vector3(-65, -60, 0),
	vmath.vector3(-95, -50, 0),
	vmath.vector3(-120, 0, 0),
}

---@class GameSceneGuiScript:GuiScriptBase
local Script = COMMON.class("GameSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.GAME_GUI, scene = WORLD.sm:get_scene_by_name(WORLD.sm.SCENES.GAME) })
end

function Script:bind_vh()
	self.vh = {
		top_right = gui.get_node("top_right"),
		top = gui.get_node("top"),
		bottom_left = gui.get_node("bottom_left"),
		bottom_right = gui.get_node("bottom_right"),
		right = gui.get_node("right"),
		right_buttons = gui.get_node("right_buttons"),
		left = gui.get_node("left"),
		left_buttons = gui.get_node("left_buttons"),
		left_top = gui.get_node("left_top"),
		bottom = gui.get_node("bottom"),
		arrows = gui.get_node("arrows"),
		pc_input = gui.get_node("pc_input"),
		mobile_input = gui.get_node("mobile_input"),
		pointer = gui.get_node("mobile_input/finger"),
		tutorial_pointer = gui.get_node("tutorial_pointer/root"),
		tutorials = {
			root = gui.get_node("tutorial"),
		},
		inputs = {},
	}
	self.views = {
		virtual_pad = VirtualPad("virtual_pad"),
		btn_settings = GUI.ButtonScale("btn_settings"),
		btn_settings_lbl = AutosizeLbl("btn_settings/lbl"),

		mobile_input_title = AutosizeLbl("mobile_input/title"),
		pc_input_title = AutosizeLbl("pc_input/title"),
		levels = {
			root = gui.get_node("levels"),
			lbl = gui.get_node("level/lbl"),
			btn_next = GUI.ButtonScale("btn_next"),
			btn_prev = GUI.ButtonScale("btn_prev"),
		}
	}
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.GAME)
	gui.set_enabled(self.vh.tutorial_pointer, false)
	self.pointer_mover = LineMover(Curve({ points = POINTER_POSITIONS, tension = 0.5, segments = 10 }))
	self.pointer_mover:set_loop(true)
	self.pointer_mover:speed_a_set(0.4)

	local is_mobile = COMMON.is_mobile()
	gui.set_enabled(self.vh.pc_input, not is_mobile)
	gui.set_enabled(self.vh.mobile_input, is_mobile)
	gui.animate(self.vh.arrows, "scale", 0.75, gui.EASING_OUTQUAD, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)

	for _, input in ipairs(self.vh.inputs) do
		gui.set_enabled(input, not is_mobile)
		if not is_mobile then
			local scale = gui.get_scale(input)
			gui.animate(input, "scale", scale * 1.1, gui.EASING_OUTQUAD, 1.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		end
	end

	self.show_input_tooltip = true

	self.views.btn_settings.input_on_pressed = true
	self.views.btn_settings:set_input_listener(function()
		if not WORLD.sm:is_working() then
			WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
			WORLD.sm:show(WORLD.sm.MODALS.SETTINGS)
		end
	end)

	self.views.levels.btn_next:set_input_listener(function()
		local level_idx = COMMON.LUME.findi(DEFS.LEVELS.LEVELS_LIST, WORLD.game.level_creator.location.level.id)
		level_idx = level_idx + 1
		if DEFS.LEVELS.LEVELS_LIST[level_idx] then
			WORLD.game:load_location(DEFS.LOCATIONS.BY_ID.ZONE_1.id, DEFS.LEVELS.LEVELS_LIST[level_idx])
		end
	end)

	self.views.levels.btn_prev:set_input_listener(function()
		local level_idx = COMMON.LUME.findi(DEFS.LEVELS.LEVELS_LIST, WORLD.game.level_creator.location.level.id)
		level_idx = level_idx - 1
		if DEFS.LEVELS.LEVELS_LIST[level_idx] then
			WORLD.game:load_location(DEFS.LOCATIONS.BY_ID.ZONE_1.id, DEFS.LEVELS.LEVELS_LIST[level_idx])
		end
	end)

	self.views.virtual_pad:set_enabled(true)

	table.insert(self.subscriptions,COMMON.EVENTS.LEVEL_CHANGED:subscribe(true,function()
		self:on_level_changed()
	end))

	self:on_level_changed()
end

function Script:update(dt)
	self.views.virtual_pad:update(dt)

	if gui.is_enabled(self.vh.mobile_input) then
		self.pointer_mover:move(dt)
		TEMP_V.x = self.pointer_mover.position.x
		TEMP_V.y = self.pointer_mover.position.y
		gui.set_position(self.vh.pointer, TEMP_V)
	end

	if WORLD.sm:get_top() and WORLD.sm:get_top()._name ~= WORLD.sm.SCENES.GAME or WORLD.sm:is_working() then
		self.views.virtual_pad:reset()
	end
	if WORLD.game.state.in_battle then
		self.views.virtual_pad:reset()
	end
end

function Script:on_input(action_id, action)
	if (self.views.btn_settings:on_input(action_id, action)) then return true end
	if (self.views.levels.btn_next:on_input(action_id, action)) then return true end
	if (self.views.levels.btn_prev:on_input(action_id, action)) then return true end
	if (self.views.virtual_pad:on_input(action_id, action)) then return true end
end

function Script:on_resize()
	gui.set_adjust_mode(self.vh.top_right, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.top_right, COMMON.RENDER.gui_scale.scale)
	gui.set_adjust_mode(self.vh.top, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.top, COMMON.RENDER.gui_scale.scale)
	gui.set_adjust_mode(self.vh.left, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.left, COMMON.RENDER.gui_scale.scale)
	gui.set_adjust_mode(self.vh.right, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.right, COMMON.RENDER.gui_scale.scale)
	gui.set_scale(self.vh.left_top, COMMON.RENDER.gui_scale.scale)
	gui.set_adjust_mode(self.vh.left_top, COMMON.RENDER.gui_scale.mode)
	gui.set_adjust_mode(self.vh.bottom, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.bottom, COMMON.RENDER.gui_scale.scale)
	gui.set_adjust_mode(self.vh.bottom_left, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.bottom_left, COMMON.RENDER.gui_scale.scale2)
	gui.set_adjust_mode(self.vh.bottom_right, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.bottom_right, COMMON.RENDER.gui_scale.scale2)

	gui.set_adjust_mode(self.vh.left_buttons, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.left_buttons, COMMON.RENDER.gui_scale.scale3)
	gui.set_adjust_mode(self.vh.right_buttons, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.right_buttons, COMMON.RENDER.gui_scale.scale3)
	gui.set_adjust_mode(self.views.levels.root, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.views.levels.root, COMMON.RENDER.gui_scale.scale3)

	gui.set_adjust_mode(self.vh.tutorials.root, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.tutorials.root, COMMON.RENDER.gui_scale.scale3)
	if COMMON.RENDER.screen_size.aspect < 1 then
		gui.set_scale(self.views.virtual_pad.vh.root, vmath.vector3(1.5))
		gui.set_position(self.vh.tutorials.root, vmath.vector3(480, 480, 0))
	else
		gui.set_position(self.vh.tutorials.root, vmath.vector3(480, 540, 0))
		gui.set_scale(self.views.virtual_pad.vh.root, vmath.vector3(0.75))
	end
end

function Script:hide_input_tooltip()
	if not self.show_input_tooltip then return
	end
	self.show_input_tooltip = false

	if gui.is_enabled(self.vh.pc_input) then
		gui.animate(self.vh.pc_input, "color", vmath.vector4(1, 1, 1, 0), gui.EASING_OUTQUAD, 1, 0, function()
			gui.set_enabled(self.vh.pc_input, false)
		end)
	end
	if gui.is_enabled(self.vh.mobile_input) then
		gui.animate(self.vh.mobile_input, "color", vmath.vector4(1, 1, 1, 0), gui.EASING_OUTQUAD, 1, 0, function()
			gui.set_enabled(self.vh.mobile_input, false)
		end)
	end
end

function Script:on_level_changed()
	gui.set_text(self.views.levels.lbl,COMMON.LUME.findi(DEFS.LEVELS.LEVELS_LIST,WORLD.game.level_creator.location.level.id))
	self:on_storage_changed()
end

function Script:on_storage_changed()
	local level_idx = COMMON.LUME.findi(DEFS.LEVELS.LEVELS_LIST, WORLD.game.level_creator.location.level.id)
	self.views.levels.btn_prev:set_enabled(level_idx > 1)
	self.views.levels.btn_next:set_enabled(level_idx + 1 <= #DEFS.LEVELS.LEVELS_LIST and
			WORLD.storage.levels:level_data_get(DEFS.LEVELS.LEVELS_LIST[level_idx]).completed)
end

function Script:on_language_changed()
	self.views.btn_settings_lbl:set_text(COMMON.LOCALIZATION:translate("btn_settings"))
	self.views.pc_input_title:set_text(COMMON.LOCALIZATION:translate("tutorial_move_arrows"))
	self.views.mobile_input_title:set_text(COMMON.LOCALIZATION:translate("tutorial_move_drag"))
end

COMMON.N28S.register_scripts({ Script() })
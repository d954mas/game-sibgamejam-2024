local COMMON = require "libs.common"
local ACTIONS = require "libs.actions.actions"
local WORLD = require "world.world"
local GUI = require "libs_project.gui.gui"
local ENUMS = require "world.enums.enums"
local AutosizeLabel = require "libs_project.gui.autosize_label"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"

local QuestCell = COMMON.class("QuestCell")

function QuestCell:initialize(template_name, quest_idx)
	self.template_name = assert(template_name)
	self.vh = {
		root = gui.get_node(template_name .. "/root"),
		bg = gui.get_node(template_name .. "/bg"),
		icon = gui.get_node(template_name .. "/icon"),
		icon_completed = gui.get_node(template_name .. "/icon_completed"),
	}
	self.views = {
		title = AutosizeLabel(template_name .. "/title"),
		progress_bar = GUI.ProgressBar({
			root = gui.get_node(template_name .. "/progress/root"),
			bg = gui.get_node(template_name .. "/progress/bg"),
			progress = gui.get_node(template_name .. "/progress/progress"),
			lbl = gui.get_node(template_name .. "/progress/lbl"),
		}),
	}
	self.quest_idx = assert(quest_idx)
	self.quest_data = assert(WORLD.storage.daily_tasks.daily_tasks.tasks[quest_idx])
	self:gui_init()
	self:update_progress()
end

function QuestCell:on_language_changed()
	if self.quest_data.type == ENUMS.DAILY_TASK_TYPE.TIME_TO_PLAY then
		local max_min = math.floor(self.quest_data.need / 60)
		self.views.title:set_text(COMMON.LOCALIZATION:translate("quest_" .. self.quest_data.type .. "_title", { value = max_min }))
	else
		self.views.title:set_text(COMMON.LOCALIZATION:translate("quest_" .. self.quest_data.type .. "_title", { value = self.quest_data.need }))
	end
end

function QuestCell:gui_init()
	self.views.progress_bar:set_value_max(self.quest_data.need)

	if self.quest_data.type == ENUMS.DAILY_TASK_TYPE.TIME_TO_PLAY then
		gui.play_flipbook(self.vh.icon, COMMON.HASHES.hash("icon_timer"))
	elseif self.quest_data.type == ENUMS.DAILY_TASK_TYPE.PUNCH_PUNCH_BAG then
		gui.play_flipbook(self.vh.icon, COMMON.HASHES.hash("icon_punch_bag"))
	elseif self.quest_data.type == ENUMS.DAILY_TASK_TYPE.FIGHT_WIN then
		gui.play_flipbook(self.vh.icon, COMMON.HASHES.hash("icon_win"))
	end

	if self.quest_data.type == ENUMS.DAILY_TASK_TYPE.TIME_TO_PLAY then
		local max_min = math.floor(self.quest_data.need / 60)
		self.views.progress_bar.lbl_format_value = function()
			return (math.min(math.floor(self.quest_data.value / 60), max_min) .. "/" .. max_min)
		end
	else
		local max = math.floor(self.quest_data.need)
		self.views.progress_bar.lbl_format_value = function()
			return (math.min(math.floor(self.quest_data.value), max) .. "/" .. max)
		end
	end

	self:on_language_changed()
end

function QuestCell:update_progress()
	self.views.progress_bar:set_value(self.quest_data.value, true)
	local completed = self.quest_data.state == ENUMS.DAILY_TASK_STATE.DONE
	gui.set_enabled(self.vh.icon_completed, completed)
end


---@class QuestSceneGuiScript:GuiScriptBase
local Script = COMMON.class("QuestSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.QUEST_GUI })
end

function Script:bind_vh()
	self.vh = {
		root = gui.get_node("root"),
		root_adjust = gui.get_node("root/adjust"),
		fader = gui.get_node("fader"),
		click_zone = gui.get_node("click_zone"),
		reward_icon_gold = gui.get_node("reward/icon_gold"),
		title_lbl = AutosizeLabel("title"),
		coming_tomorrow_root = gui.get_node("come_back_tomorrow/root"),
		coming_tomorrow_lbl = AutosizeLabel("come_back_tomorrow/title"),

	}
	self.views = {
		btn_close = GUI.ButtonScale("btn_close"),
		btn_collect = GUI.ButtonScale("btn_collect"),
		btn_collect_title = AutosizeLabel("btn_collect/lbl"),
		reward_title = AutosizeLabel("reward/title"),
		quest_cells = {
			QuestCell("task_1", 1),
		},
	}
	self.views.btn_collect.vh.bg = gui.get_node("btn_collect/bg")
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.MODAL)
	self.animation_action = ACTIONS.Sequence()
	self.animation_action.drop_empty = false

	self.fader_color = gui.get_color(self.vh.fader)
	gui.set_color(self.vh.fader, vmath.vector4(self.fader_color.x, self.fader_color.y, self.fader_color.z, 0))

	self.views.btn_close:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
		self:close()
	end)
	self.views.btn_collect:set_input_listener(function()
		WORLD.storage.daily_tasks:collect()
		local from = gui.get_screen_position(self.vh.reward_icon_gift)
		local ctx = COMMON.CONTEXT:set_context_top_top_panel_gui()
		ctx.data:fly_gift(from)
		ctx:remove()
	end)
	self.views.btn_collect.set_ignore_input = function(btn, ignore_input)
		GUI.ButtonScale.set_ignore_input(btn, ignore_input)
		gui.play_flipbook(btn.vh.bg, COMMON.HASHES.hash(ignore_input and "btn_disable" or "btn_collect"))
	end
end

function Script:close()
	if not WORLD.sm:is_working() then
		WORLD.sdk:ads_commercial(function()
			WORLD.sm:close_modals()
		end)
	end
end

function Script:on_language_changed()
	self.vh.title_lbl:set_text(COMMON.LOCALIZATION:translate("quest_title"))
	self.vh.coming_tomorrow_lbl:set_text(COMMON.LOCALIZATION:translate("quest_completed_wait"))
	self.views.btn_collect_title:set_text(COMMON.LOCALIZATION:translate("btn_collect"))
	self.views.reward_title:set_text(COMMON.LOCALIZATION:translate("quest_reward_title"))

	for _,cell in ipairs(self.views.quest_cells) do
		cell:on_language_changed()
	end
end

function Script:animate_hide()
	GUI.window_hide_animation(self)
end

function Script:animate_show()
	GUI.window_show_animation(self)
end

function Script:update(dt)
	self.animation_action:update(dt)
	for _, cell in ipairs(self.views.quest_cells) do
		cell:update_progress()
	end
end

function Script:on_input(action_id, action)
	if (action_id == COMMON.HASHES.INPUT.ESCAPE and action.pressed) then
		self:close()
		return true
	end
	if (self.views.btn_close:on_input(action_id, action)) then return true end
	if (self.views.btn_collect:on_input(action_id, action)) then return true end
	if (action_id == COMMON.HASHES.INPUT.TOUCH and action.pressed and not gui.pick_node(self.vh.click_zone, action.x, action.y)) then
		self:close()
		return
	end
end

function Script:on_resize()
	gui.set_adjust_mode(self.vh.root_adjust, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.root_adjust, COMMON.RENDER.gui_scale.scale2)
end

function Script:on_storage_changed()
	gui.set_enabled(self.vh.coming_tomorrow_root, false)
	if WORLD.storage.daily_tasks.daily_tasks.state == ENUMS.DAILY_TASKS_STATE.NEED_COLLECT then
		self.views.btn_collect:set_enabled(true)
		self.views.btn_collect:set_ignore_input(false)
	elseif WORLD.storage.daily_tasks.daily_tasks.state == ENUMS.DAILY_TASKS_STATE.IN_PROGRESS then
		self.views.btn_collect:set_enabled(true)
		self.views.btn_collect:set_ignore_input(true)
	elseif WORLD.storage.daily_tasks.daily_tasks.state == ENUMS.DAILY_TASKS_STATE.COLLECTED then
		self.views.btn_collect:set_enabled(false)
		gui.set_enabled(self.vh.coming_tomorrow_root, true)
	end
end


COMMON.N28S.register_scripts({ Script() })
local COMMON = require "libs.common"
local ACTIONS = require "libs.actions.actions"
local WORLD = require "world.world"
local GUI = require "libs_project.gui.gui"
local DEFS = require "world.balance.def.defs"
local ENUMS = require "world.enums.enums"
local AutosizeLabel = require "libs_project.gui.autosize_label"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"

---@class OfflineIncomeSceneGuiScript:GuiScriptBase
local Script = COMMON.class("OfflineIncomeSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.OFFLINE_INCOME_GUI })
end

function Script:bind_vh()
	self.vh = {
		root = gui.get_node("root"),
		root_adjust = gui.get_node("root/adjust"),
		fader = gui.get_node("fader"),
		btn_free_lbl = AutosizeLabel("btn_free/lbl"),
		btn_ads_lbl = AutosizeLabel("btn_ads/lbl"),
		btn_ads_icon = gui.get_node("btn_ads/icon"),
		lbl_title = AutosizeLabel("title"),
		lbl_description = AutosizeLabel("description"),
		reward = {
			gold = {
				icon = gui.get_node("reward/gold/icon"),
				lbl = AutosizeLabel("reward/gold/lbl"),
			},
		}
	}
	self.views = {
		btn_free = GUI.ButtonScale("btn_free"),
		btn_ads = GUI.ButtonScale("btn_ads"),
	}
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.MODAL)
	self.animation_action = ACTIONS.Sequence()
	self.animation_action.drop_empty = false

	self.fader_color = gui.get_color(self.vh.fader)
	gui.set_color(self.vh.fader, vmath.vector4(self.fader_color.x, self.fader_color.y, self.fader_color.z, 0))

	local reward_mul = WORLD.sm:get_scene_by_name(WORLD.sm.MODALS.OFFLINE_INCOME)._input.reward
	self.reward_gold = reward_mul * WORLD.game:offer_get_value(DEFS.RESOURCES.GOLD.id)
	self.vh.reward.gold.lbl:set_text(COMMON.LUME.formatIdleNumber(self.reward_gold))
	GUI.set_nodes_to_center(self.vh.reward.gold.lbl.node, true, self.vh.reward.gold.icon, false, 6)

	self.views.btn_ads:set_input_listener(function()
		WORLD.sdk:ads_rewarded(function(success)
			if success then
				WORLD.storage.resources:add(DEFS.RESOURCES.GOLD.id, self.reward_gold, ENUMS.RESOURCE_ADD_PLACEMENT.OFFLINE_PROGRESS)
				WORLD.storage.resources:add(DEFS.RESOURCES.GOLD.id, self.reward_gold, ENUMS.RESOURCE_ADD_PLACEMENT.OFFLINE_PROGRESS)
				self:close()
			end
		end, "offline_progress")
	end)

	self.views.btn_free:set_input_listener(function()
		WORLD.storage.resources:add(DEFS.RESOURCES.GOLD.id, self.reward_gold, ENUMS.RESOURCE_ADD_PLACEMENT.OFFLINE_PROGRESS)
		self:close()
	end)
end

function Script:on_language_changed()
	self.vh.lbl_title:set_text(COMMON.LOCALIZATION:translate("offline_income_title"))
	self.vh.lbl_description:set_text(COMMON.LOCALIZATION:translate("offline_income_description"))
	self.vh.btn_ads_lbl:set_text(COMMON.LOCALIZATION:translate("btn_collect"))
	self.vh.btn_free_lbl:set_text(COMMON.LOCALIZATION:translate("btn_collect"))
	GUI.set_nodes_to_center(self.vh.btn_ads_lbl.node, true, self.vh.btn_ads_icon, false, 6)
end

function Script:close()
	if not WORLD.sm:is_working() then
		WORLD.sdk:ads_commercial(function()
			WORLD.sm:back()
		end)
	end
end

function Script:animate_hide()
	GUI.window_hide_animation(self)
end

function Script:animate_show()
	GUI.window_show_animation(self)
end

function Script:update(dt)
	self.animation_action:update(dt)
end

function Script:on_input(action_id, action)
	if (self.views.btn_free:on_input(action_id, action)) then return true end
	if (self.views.btn_ads:on_input(action_id, action)) then return true end
end

function Script:on_resize()
	gui.set_adjust_mode(self.vh.root_adjust, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.root_adjust, COMMON.RENDER.gui_scale.scale2)
end


COMMON.N28S.register(Script())